const fs = require('fs');
const path = require('path');

class ReportExportEngine {
  constructor() {
    this.supportedFormats = ['html', 'json', 'csv', 'pdf', 'xml']
  }

  async exportReport(data, format = 'html', options = {}) {
    switch (format.toLowerCase()) {
      case 'html':
        return this.exportToHtml(data, options);
      case 'json':
        return this.exportToJson(data, options);
      case 'csv':
        return this.exportToCsv(data, options);
      case 'xml':
        return this.exportToXml(data, options);
      case 'pdf':
        return this.exportToPdf(data, options);
      default:
        throw new Error(`Unsupported export format: ${format}`);
    }
  }

  exportToHtml(data, options) {
    const { title = 'Security Report', includeStyles = true } = options;
    
    const styles = includeStyles ? `
    <style>
      body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
      .header { background: #2c3e50; color: white; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
      .summary { background: #ecf0f1; padding: 15px; margin: 20px 0; border-radius: 5px; }
      .vulnerability { border-left: 4px solid #e74c3c; padding: 15px; margin: 15px 0; background: #f9f9f9; }
      .critical { border-color: #8B0000; background: #ffe6e6; }
      .high { border-color: #e74c3c; background: #ffe6e6; }
      .medium { border-color: #f39c12; background: #fff3e0; }
      .low { border-color: #f1c40f; background: #fffde7; }
      .info { border-color: #3498db; background: #e3f2fd; }
      .metadata { background: #f8f9fa; padding: 10px; border-radius: 3px; margin: 10px 0; }
      table { width: 100%; border-collapse: collapse; margin: 20px 0; }
      th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
      th { background-color: #f2f2f2; }
    </style>` : "";

    const vulnerabilitiesHtml = data.vulnerabilities ? data.vulnerabilities.map(vuln => `
      <div class="vulnerability ${vuln.severity || "info"}">
        <h3>${vuln.title || "Unknown Vulnerability'}</h3>
        <p><strong>Severity:</strong> ${vuln.severity || 'Unknown'}</p>
        <p><strong>Description:</strong> ${vuln.description || 'No description available'}</p>
        ${vuln.location ? `<p><strong>Location:</strong> ${vuln.location.url || vuln.location}</p>` : ''}
        ${vuln.recommendation ? `<p><strong>Recommendation:</strong> ${vuln.recommendation}</p>` : ''}
        ${vuln.cve ? `<p><strong>CVE:</strong> ${vuln.cve}</p>` : ''}
      </div>
    `).join("") : "<p>No vulnerabilities found.</p>";

    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    ${styles}
</head>
<body>
    <div class="header">
        <h1>${title}</h1>
        <p>Generated: ${data.timestamp || new Date().toISOString()}</p>
        ${data.target ? `<p>Target: ${data.target}</p>` : ""}
    </div>
    
    <div class="summary">
        <h2>Executive Summary</h2>
        <p>${data.summary || "Security assessment completed successfully."}</p>
        <div class="metadata">
            <strong>Statistics:</strong>
            <ul>
                <li>Total Vulnerabilities: ${data.totalVulnerabilities || 0}</li>
                <li>Critical: ${data.criticalCount || 0}</li>
                <li>High: ${data.highCount || 0}</li>
                <li>Medium: ${data.mediumCount || 0}</li>
                <li>Low: ${data.lowCount || 0}</li>
                <li>Info: ${data.infoCount || 0}</li>
            </ul>
        </div>
    </div>
    
    <div class="vulnerabilities">
        <h2>Detailed Findings</h2>
        ${vulnerabilitiesHtml}
    </div>
    
    ${data.recommendations ? `
    <div class="recommendations">
        <h2>Recommendations</h2>
        <ul>
            ${data.recommendations.map(rec => `<li>${rec}</li>`).join("")}
        </ul>
    </div>` : ""}
    
    <div class="metadata">
        <h3>Report Metadata</h3>
        <p><strong>Generated by:</strong> Security Platform</p>
        <p><strong>Report ID:</strong> ${data.reportId || "N/A'}</p>
        <p><strong>Scan Duration:</strong> ${data.scanDuration || 'N/A'}</p>
    </div>
</body>
</html>`;
  }

  exportToJson(data, options) {
    const { pretty = true } = options;
    return JSON.stringify(data, null, pretty ? 2 : 0);
  }

  exportToCsv(data, options) {
    if (!data.vulnerabilities || !Array.isArray(data.vulnerabilities)) {
      return 'No vulnerability data available for CSV export';
    }

    const headers = ['Title', 'Severity', 'Description', 'Location', 'CVE', 'Recommendation'];
    const csvRows = [headers.join(',')];

    data.vulnerabilities.forEach(vuln => {
      const row = [
        this.escapeCsvField(vuln.title || ''),
        this.escapeCsvField(vuln.severity || ''),
        this.escapeCsvField(vuln.description || ''),
        this.escapeCsvField(vuln.location?.url || vuln.location || ''),
        this.escapeCsvField(vuln.cve || ''),
        this.escapeCsvField(vuln.recommendation || '')
      ];
      csvRows.push(row.join(','));
    });

    return csvRows.join("\n");
  }

  exportToXml(data, options) {
    const { includeMetadata = true } = options;
    
    let xml = "<?xml version="1.0" encoding="UTF-8"?>\n";
    xml += '<SecurityReport>\n';
    xml += `  <Title>${this.escapeXml(data.title || 'Security Report')}</Title>\n`;
    xml += `  <Timestamp>${data.timestamp || new Date().toISOString()}</Timestamp>\n`;
    
    if (data.target) {
      xml += `  <Target>${this.escapeXml()}</Target>\n`;
    }
    
    xml += '  <Summary>\n';
    xml += `    <TotalVulnerabilities>${data.totalVulnerabilities || 0}</TotalVulnerabilities>\n`;
    xml += `    <CriticalCount>${data.criticalCount || 0}</CriticalCount>\n`;
    xml += `    <HighCount>${data.highCount || 0}</HighCount>\n`;
    xml += `    <MediumCount>${data.mediumCount || 0}</MediumCount>\n`;
    xml += `    <LowCount>${data.lowCount || 0}</LowCount>\n`;
    xml += '  </Summary>\n';
    
    if (data.vulnerabilities && Array.isArray(data.vulnerabilities)) {
      xml += '  <Vulnerabilities>\n';
      data.vulnerabilities.forEach(vuln => {
        xml += '    <Vulnerability>\n';
        xml += `      <Title>${this.escapeXml(vuln.title || '')}</Title>\n`;
        xml += `      <Severity>${this.escapeXml(vuln.severity || '')}</Severity>\n`;
        xml += `      <Description>${this.escapeXml(vuln.description || '')}</Description>\n`;
        if (vuln.location) {
          xml += `      <Location>${this.escapeXml(vuln.location.url || vuln.location)}</Location>\n`;
        }
        if (vuln.cve) {
          xml += `      <CVE>${this.escapeXml(vuln.cve)}</CVE>\n`;
        }
        if (vuln.recommendation) {
          xml += `      <Recommendation>${this.escapeXml(vuln.recommendation)}</Recommendation>\n`;
        }
        xml += '    </Vulnerability>\n';
      });
      xml += '  </Vulnerabilities>\n';
    }
    
    xml += '</SecurityReport>';
    return xml;
  }

  async exportToPdf(data, options) {
    // For now, return HTML that can be converted to PDF
    // In a full implementation, you'd use puppeteer or similar
    return this.exportToHtml()
  }

  escapeCsvField(field) {
    if (typeof field !== 'string') return '';
    if (field.includes(",") || field.includes(""") || field.includes("\n")) {
      return `"${field.replace(/"/g, """")}"`;
    }
    return field;
  }

  escapeXml(text) {
    if (typeof text !== "string') return '';
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;')
      .replace(/'/g, '&apos;');
  }

  async saveReport(content, filename, format) {
    const reportsDir = path.join(process.cwd(), "reports");
    if (!fs.existsSync(reportsDir)) {
      fs.mkdirSync(reportsDir, { recursive: true });
    }
    
    const filePath = path.join(reportsDir, `${filename}.${format}`);
    fs.writeFileSync(filePath, content);
    return filePath;
  }

  getSupportedFormats() {
    return [...this.supportedFormats]
  }
}

module.exports = ReportExportEngine