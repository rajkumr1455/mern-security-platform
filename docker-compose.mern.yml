version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: security-platform-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: securepassword
      MONGO_INITDB_DATABASE: security-platform
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - security-platform

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: security-platform-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - security-platform

  # Backend API Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: security-platform-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:securepassword@mongodb:27017/security-platform?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CLIENT_URL: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./server:/app
      - /app/node_modules
      - scan_results:/app/results
      - logs:/app/logs
    networks:
      - security-platform

  # Frontend React App
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: security-platform-frontend
    restart: unless-stopped
    environment:
      REACT_APP_SERVER_URL: http://localhost:5000
      REACT_APP_WS_URL: ws://localhost:5000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./client:/app
      - /app/node_modules
    networks:
      - security-platform

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: security-platform-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - security-platform

  # External Security Tools Container
  security-tools:
    build:
      context: ./tools
      dockerfile: Dockerfile
    container_name: security-platform-tools
    restart: unless-stopped
    environment:
      TOOLS_API_PORT: 8080
    ports:
      - "8080:8080"
    volumes:
      - scan_results:/results
      - tools_cache:/cache
    networks:
      - security-platform

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  scan_results:
    driver: local
  logs:
    driver: local
  nginx_logs:
    driver: local
  tools_cache:
    driver: local

networks:
  security-platform:
    driver: bridge